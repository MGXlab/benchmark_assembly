import pandas as pd
import os

configfile: "config/config.yaml"
report: "report/workflow.rst"

root_dir = os.getcwd()

samples_df = pd.read_csv(
        config["samples"],
        sep = "\t",
        )

SAMPLES = samples_df.sample_id.to_list()

def get_fastqs(wc):
    r1 = samples_df.loc[samples_df['sample_id'] == wc.sample]['R1'].values[0]
    r2 = samples_df.loc[samples_df['sample_id'] == wc.sample]['R2'].values[0]
    return list((r1,r2))

def get_assembly(wc):
    sample=wc.sample
    if wc.assembler=='metaspades':
        return os.path.join(root_dir, f"results/{sample}/assembly/metaspades/scaffolds.fasta")
    else:
        return os.path.join(root_dir, f"results/{sample}/assembly/megahit/final.contigs.fa")

rule all:
    input:
        expand([
            # Assembly
            "results/{sample}/assembly/metaspades/scaffolds.fasta",
            "results/{sample}/assembly/megahit/final.contigs.fa",
            "results/{sample}/assembly/{assembler}.time.txt",
            "results/{sample}/assembly/{assembler}.mem.txt",
            "results/{sample}/assembly/quast_{assembler}/report.tsv",
            # Mapping
            "results/{sample}/mapping/{assembler}_index/{sample}_{assembler}.fa",
            "results/{sample}/mapping/{sample}_{assembler}.bam",
            "results/{sample}/mapping/stats/{sample}_{assembler}.flagstat.txt",
            "results/{sample}/mapping/stats/{sample}_{assembler}.stats.txt",
            # CAT
            "results/{sample}/assembly/{assembler}.filtered.fa",
            "results/{sample}/CAT/{assembler}/{sample}.summary.txt",
            # Reporting
            "report/runtime_stats/{sample}_usage.html",
            "report/results/multiqc_report.html",
            "results/benchmarks/aggregated/all.tsv",
            "results/benchmarks/aggregated/s.svg",
            "results/benchmarks/aggregated/io_out.svg",
            "results/benchmarks/aggregated/max_rss.svg",
            "results/benchmarks/aggregated/cpu_time.svg",
            ],
            sample=SAMPLES,
            assembler=['metaspades', 'megahit']
            )

rule metaspades:
    input:
        fqs = get_fastqs
    output:
        scaffolds_fasta = "results/{sample}/assembly/metaspades/scaffolds.fasta",
        time_txt = "results/{sample}/assembly/metaspades.time.txt",
        usage_txt = "results/{sample}/assembly/metaspades.mem.txt",
    log: 
        stdout = "results/logs/{sample}.metaspades.stdout",
        stderr = "results/logs/{sample}.metaspades.stderr"
    conda: "envs/assembly.yaml"
    threads: 32
    resources:
        mem_mb=498*1000
    params:
        max_mem = 498,
        outdir = "results/{sample}/assembly/metaspades",
        ps_interval = config.get('ps_interval', 300)
    shell:
        '''
        /usr/bin/time -f"%E %M" -o {output.time_txt} \
        metaspades.py -1 {input.fqs[0]} -2 {input.fqs[1]} \
        -t {threads} \
        --memory {params.max_mem} \
        --only-assembler \
        -o {params.outdir} 1>{log.stdout} 2>{log.stderr} &
        pid=$!
        while ps -p $pid &>/dev/null;do
            date +"%T" >> {output.usage_txt}
            ps -U nikos -o pid,user,rss,command | grep spades >> {output.usage_txt}
            sleep {params.ps_interval}
        done
        rm -rfv {params.outdir}/K* 1>>{log.stdout}
        '''

rule megahit:
    input:
        fqs = get_fastqs
    output:
        contigs_fasta = "results/{sample}/assembly/megahit/final.contigs.fa",
        time_txt = "results/{sample}/assembly/megahit.time.txt",
        usage_txt = "results/{sample}/assembly/megahit.mem.txt"
    log: 
        stdout = "results/logs/{sample}.megahit.stdout",
        stderr = "results/logs/{sample}.megahit.stderr"
    conda: "envs/assembly.yaml"
    threads: 32
    resources:
        mem_mb=498*1000
    params:
        mem = 0.98,
        outdir = "results/{sample}/assembly/megahit",
        prefix = "final",
        ps_interval = config.get('ps_interval', 300)
    shell:
        '''
        /usr/bin/time -f"%E %M" -o {output.time_txt} \
        megahit -1 {input.fqs[0]} -2 {input.fqs[1]} \
        -t {threads} \
        -m {params.mem} \
        --continue \
        --out-prefix {params.prefix} \
        -o {params.outdir}_tmp 1>{log.stdout} 2>{log.stderr} &
        pid=$!
        while ps -p $pid &>/dev/null;do
            date +"%T" >> {output.usage_txt}
            ps -U nikos -o pid,user,rss,command | grep megahit >> {output.usage_txt}
            sleep {params.ps_interval}
        done
        mv {params.outdir}_tmp/final.contigs.fa {output.contigs_fasta}
        rm -rvf {params.outdir}_tmp/intermediate_contigs 1>>{log.stdout}
        '''

rule quast:
    input:
        rules.metaspades.output.scaffolds_fasta,
        rules.megahit.output.contigs_fasta,
    output:
        report_tsv="results/{sample}/assembly/quast_{assembler}/report.tsv"
    conda: 
        "envs/quast.yaml"
    log:
        stdout="results/logs/{sample}.quast_{assembler}.stdout",
        stderr="results/logs/{sample}.quast_{assembler}.stderr"
    threads: 16
    benchmark: "results/benchmarks/{sample}.quast_{assembler}.tsv"
    params:
        outdir="results/{sample}/assembly/quast_{assembler}",
        assembly=get_assembly
    shell:
        """
        quast -t {threads} -o {params.outdir} \
        --no-html --no-icarus \
        {params.assembly} 1>{log.stdout} 2>{log.stderr}
        """

rule bwa_index:
    input:
        rules.metaspades.output.scaffolds_fasta,
        rules.megahit.output.contigs_fasta,
    output:
        linked_file="results/{sample}/mapping/{assembler}_index/{sample}_{assembler}.fa",
        index_files = multiext("results/{sample}/mapping/{assembler}_index/{sample}_{assembler}.fa",
                ".amb",".ann", ".bwt", ".pac", ".sa")
    conda:
        "envs/mapping.yaml"
    log:
        stdout="results/logs/{sample}.bwa_index_{assembler}.stdout",
        stderr="results/logs/{sample}.bwa_index_{assembler}.stderr"
    params:
        assembly=get_assembly
    benchmark:
        "results/benchmarks/{sample}.bwa_index_{assembler}.tsv"
    shell:
        """
        ln -s {params.assembly} {output.linked_file} && \
        bwa index {output.linked_file} 1>{log.stdout} 2>{log.stderr}
        """


rule bwa_mem:
    input:
        fqs=get_fastqs,
        index_files = rules.bwa_index.output.index_files
    output:
        bam="results/{sample}/mapping/{sample}_{assembler}.bam",
        bam_index="results/{sample}/mapping/{sample}_{assembler}.bam.csi"
    conda:
        "envs/mapping.yaml"
    log:
        bwa_mem_stderr="results/logs/{sample}.bwa_mem_{assembler}.stderr",
        samtools_stderr="results/logs/{sample}.samtools_sort_{assembler}.stderr"
    threads: 16 
    params:
        index="results/{sample}/mapping/{assembler}_index/{sample}_{assembler}.fa",
        read_group=r"'@RG\tID:{sample}\tSM:{sample}'",
        sort_prefix="results/{sample}/mapping/{sample}_{assembler}.tmp"
    benchmark:
        "results/benchmarks/{sample}.bwa_mem_{assembler}.tsv"
    shell:
        """
        bwa mem -t {threads} \
        -R {params.read_group} \
        {params.index} \
        {input.fqs[0]} {input.fqs[1]} 2>{log.bwa_mem_stderr} \
        | samtools sort \
        --threads {threads} \
        -T {params.sort_prefix} \
        -O bam \
        --write-index \
        -o {output.bam} 2>{log.samtools_stderr}
        """

rule samtools_flagstat:
    input:
        bam=rules.bwa_mem.output.bam,
        bam_index=rules.bwa_mem.output.bam_index
    output:
        flagstat="results/{sample}/mapping/stats/{sample}_{assembler}.flagstat.txt"
    conda:
        "envs/mapping.yaml"
    log:
        stderr="results/logs/{sample}.samtools_flagstat_{assembler}.stderr"
    threads: 8
    benchmark:
        "results/benchmarks/{sample}.samtools_flagstat_{assembler}.tsv"
    shell:
        """
        samtools flagstat \
        --threads {threads} \
        {input.bam} 1>{output.flagstat} 2>{log.stderr}
        """

rule samtools_stats:
    input:
        bam=rules.bwa_mem.output.bam,
        bam_index=rules.bwa_mem.output.bam_index
    output:
        stats="results/{sample}/mapping/stats/{sample}_{assembler}.stats.txt"
    conda:
        "envs/mapping.yaml"
    log:
        stderr="results/logs/{sample}.samtools_stats_{assembler}.stderr"
    threads: 8
    benchmark:
        "results/benchmarks/{sample}.samtools_stats_{assembler}.tsv"
    shell:
        """
        samtools stats \
        --threads {threads} \
        {input.bam} 1>{output.stats} 2>{log.stderr}
        """


rule size_filter:
    input:
        rules.metaspades.output.scaffolds_fasta,
        rules.megahit.output.contigs_fasta,
    output:
        filtered_fasta="results/{sample}/assembly/{assembler}.filtered.fa"
    conda:
        "envs/assembly.yaml"
    log:
        stderr="results/logs/{sample}.filter_{assembler}.stderr"
    benchmark: 
        "results/benchmarks/{sample}.filter_{assembler}.tsv"
    params:
        min_length=1500,
        assembly=get_assembly
    shell:
        """
        seqtk seq \
        -L {params.min_length} \
        {params.assembly} > {output.filtered_fasta} 2>{log.stderr}
        """

rule cat_contigs:
    input:
        scaffolds=rules.size_filter.output.filtered_fasta,
        cat_db=config["CAT_DB"],
        cat_taxonomy=config["CAT_TAX"]
    output:
        cont2class="results/{sample}/CAT/{assembler}/{sample}.contig2classification.txt",
    conda:
        "envs/cat.yaml"
    log:
        stdout="results/logs/{sample}.cat_contigs_{assembler}.stdout",
        stderr="results/logs/{sample}.cat_contigs_{assembler}.stderr"
    benchmark:
        "results/benchmarks/{sample}.cat_contigs_{assembler}.tsv"
    threads: 16
    params:
        outdir="results/{sample}/CAT/{assembler}",
        out_prefix="results/{sample}/CAT/{assembler}/{sample}"
    shell:
        """
        mkdir -p {params.outdir}
        CAT contigs \
        -c {input.scaffolds} \
        --I_know_what_Im_doing \
        --top 11 \
        -r 10 \
        --nproc {threads} \
        -d {input.cat_db} \
        -t {input.cat_taxonomy} \
        -o {params.out_prefix} 1>{log.stdout} 2>{log.stderr}
        """

rule cat_names:
    input:
        cont2class=rules.cat_contigs.output.cont2class,
        cat_taxonomy=config["CAT_TAX"]
    output:
        classwnames="results/{sample}/CAT/{assembler}/{sample}.official_names.txt"
    conda:
        "envs/cat.yaml"
    log:
        stdout="results/logs/{sample}.cat_names_{assembler}.stdout",
        stderr="results/logs/{sample}.cat_names_{assembler}.stderr"
    benchmark:
        "results/benchmarks/{sample}.cat_names_{assembler}.tsv"
    threads: 1
    shell:
        """
        CAT add_names \
        --only_official \
        -t {input.cat_taxonomy} \
        -i {input.cont2class} \
        -o {output.classwnames} 1>{log.stdout} 2>{log.stderr}
        """

rule cat_summary:
    input:
        scaffolds=rules.size_filter.output.filtered_fasta,
        classwnames=rules.cat_names.output.classwnames
    output:
        summary="results/{sample}/CAT/{assembler}/{sample}.summary.txt"
    conda:
        "envs/cat.yaml"
    log:
        stdout="results/logs/{sample}.cat_summary_{assembler}.stdout",
        stderr="results/logs/{sample}.cat_summary_{assembler}.stderr"
    benchmark:
        "results/benchmarks/{sample}.cat_summary_{assembler}.tsv"
    threads: 1
    shell:
        """
        CAT summarise \
        -c {input.scaffolds} \
        -i {input.classwnames} \
        -o {output.summary} 1>{log.stdout} 2>{log.stderr}
        """

rule plot_runstats:
    input:
        metaspades_time=rules.metaspades.output.time_txt,
        metaspades_usage=rules.metaspades.output.usage_txt,
        megahit_time=rules.megahit.output.time_txt,
        megahit_usage=rules.megahit.output.usage_txt
    output:
        report("report/runtime_stats/{sample}_usage.html",
                caption="report/runtime_usage.rst",
                category="Assembly Benchmarks",
                subcategory="{sample}"),
    conda:
        "envs/plot.yaml"
    threads: 1
    params:
        data_dir="results/{sample}/assembly",
        scrpt=srcdir("scripts/plot_assembly_stats.py")
    shell:
        """
        python {params.scrpt} -d {params.data_dir} -o {output}
        """


rule multiqc_report:
    input:
        expand([
        "results/{sample}/assembly/quast_{assembler}/report.tsv",
        "results/{sample}/mapping/stats/{sample}_{assembler}.flagstat.txt",
        "results/{sample}/mapping/stats/{sample}_{assembler}.stats.txt",
        "results/{sample}/CAT/{sample}/{sample}.summary.txt"
        ], 
        sample=SAMPLES, assembler=['megahit', 'metaspades']
        )
    output:
        report("report/results/multiqc_report.html",
                caption="report/results.rst",
                category="Results"
                ),
        multiqc_zip="report/results/multiqc_data.zip"
    log:
        stderr="results/logs/multiqc_report.stderr",
        stdout="results/logs/mutiqc_report.stdout"
    conda:
        "envs/qc.yaml"
    params:
        output_dir="report/results"

    shell:
        """
        mkdir -p {params.output_dir}
        multiqc -f -dd 3 -z -o {params.output_dir} \
        -m fastqc -m quast -m samtools \
        --no-ansi results 
        """

rule concatenate_benchmarks:
    input:
       rules.multiqc_report.output.multiqc_zip
    output:
        benchmarks_tsv = "results/benchmarks/aggregated/all.tsv"
    conda:
        "envs/plot.yaml"
    params:
        benchmarks_dir = "results/benchmarks",
        scrpt = srcdir("scripts/concatenate_benchmarks.py"),
        BGI_meta = "company BGI C",
        BC_meta = "company BC bc_"
    shell:
        """
        python {params.scrpt} -i {params.benchmarks_dir} \
            -o {output.benchmarks_tsv} -m {params.BGI_meta} \
            -m {params.BC_meta}
        """

rule plot_benchmarks:
    input:
        rules.concatenate_benchmarks.output.benchmarks_tsv
    output:
        report("results/benchmarks/aggregated/s.svg",
                caption = "report/seconds.rst",
                category="Aggregated Benchmarks",
                ),
        report("results/benchmarks/aggregated/io_out.svg",
                caption="report/io.rst",
                category="Aggregated Benchmarks",
                ),
        report("results/benchmarks/aggregated/max_rss.svg",
                caption="report/max_rss.rst",
                category="Aggregated Benchmarks",
                ),
        report("results/benchmarks/aggregated/cpu_time.svg",
                caption="report/cpu_time.rst",
                category="Aggregated Benchmarks",
                )
    conda:
        "envs/plot.yaml"
    params:
        aggregated_dir = "results/benchmarks/aggregated",
        scrpt = srcdir("scripts/plot_benchmarks.py")
    shell:
        """
        python {params.scrpt} -i {input} \
                -o {params.aggregated_dir}
        """
