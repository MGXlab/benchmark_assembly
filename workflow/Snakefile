import pandas as pd
import os
from psutil import virtual_memory

configfile: "config/config.yaml"
report: "report/workflow.rst"

# This should be *parent*/workflow/Snakefile
root_dir = os.getcwd()

# Limit memory based on machine
# Maybe redundant since snakemake, but whatever
# Available memory in host
max_mem_available = virtual_memory().total # This is in bytes
# Convert the input to bytes too
# Keep 2 Gs always available
MAX_MEM_B = int(max_mem_available - (2*(1024**3)))
MAX_MEM_KB = int(MAX_MEM_B / 1024)
MAX_MEM_MB = int(MAX_MEM_B / 1024**2)
MAX_MEM_GB = int(MAX_MEM_B / 1024**3)

samples_df = pd.read_csv(
        config["samples"],
        sep = "\t",
        )

SAMPLES = samples_df.sample_id.to_list()

ASSEMBLERS=config['assembly']


def get_fastqs(wc):
    r1 = samples_df.loc[samples_df['sample_id'] == wc.sample]['R1'].values[0]
    r2 = samples_df.loc[samples_df['sample_id'] == wc.sample]['R2'].values[0]
    return list((r1,r2))

#def get_assembly(wc):
#    sample=wc.sample
#    if wc.assembler=='metaspades':
#        return os.path.join(root_dir, f"results/samples/{sample}/assembly/metaspades/{sample}.scaffolds.fasta")
#    else:
#        return os.path.join(root_dir, f"results/samples/{sample}/assembly/megahit/{sample}.scaffolds.fasta")

rule all:
    input:
        expand([
            # Assembly
            #"results/samples/{sample}/assembly/metaspades/scaffolds.fasta",
            "results/samples/{sample}/assembly/{assembler}/{sample}.scaffolds.fasta",
            "results/samples/{sample}/assembly/{assembler}/{assembler}.time.txt",
            "results/samples/{sample}/assembly/{assembler}/{assembler}.mem.txt",
            "results/samples/{sample}/assembly/quast_{assembler}/report.tsv",
            "results/samples/{sample}/assembly/{assembler}.filtered_contigs.bed",
            # Mapping
            "results/samples/{sample}/mapping/{sample}_{assembler}.bam",
            "results/samples/{sample}/mapping/stats/{sample}_{assembler}.flagstat.txt",
            "results/samples/{sample}/mapping/stats/{sample}_{assembler}.stats.txt",
            "results/samples/{sample}/mapping/{sample}.filtered.{assembler}.bam",
            # CAT
            "results/samples/{sample}/assembly/{assembler}.filtered.fa",
            "results/samples/{sample}/CAT/{assembler}/{sample}.summary.txt",
            #RAT
            "results/samples/{sample}/RAT/{assembler}/{sample}.complete.abundance.txt" ,
            "results/RAT_krona.html",
            # Reporting
            #"results/runtime_stats/{sample}_usage.html",
            "results/multiqc_report.html",
            "results/benchmarks/aggregated/all.tsv",
            "results/benchmarks/aggregated/s.svg",
            "results/benchmarks/aggregated/io_out.svg",
            "results/benchmarks/aggregated/max_rss.svg",
            "results/benchmarks/aggregated/cpu_time.svg",
            "results/samples/{sample}/CAT/{assembler}/{sample}.{assembler}.krona.txt",
            "results/krona.html",
            "results/.report.done",
            ],
            sample=SAMPLES,
            assembler=ASSEMBLERS
            )

rule metaspades:
    input:
        fqs = get_fastqs
    output:
        scaffolds_fasta = "results/samples/{sample}/assembly/metaspades/{sample}.scaffolds.fasta",
        time_txt = "results/samples/{sample}/assembly/metaspades/metaspades.time.txt",
        usage_txt = "results/samples/{sample}/assembly/metaspades/metaspades.mem.txt",
    log: 
        stdout = "results/logs/{sample}.metaspades.stdout",
        stderr = "results/logs/{sample}.metaspades.stderr"
    conda: "envs/assembly.yaml"
    threads: 32
    resources:
        mem_mb=MAX_MEM_MB
    params:
        max_mem = MAX_MEM_GB,
        outdir = "results/samples/{sample}/assembly/metaspades",
        ps_interval = config.get('ps_interval', 300)
    shell:
        '''
        /usr/bin/time -f"%E %M" -o {output.time_txt} \
        metaspades.py -1 {input.fqs[0]} -2 {input.fqs[1]} \
        -t {threads} \
        --memory {params.max_mem} \
        --only-assembler \
        -o {params.outdir} 1>{log.stdout} 2>{log.stderr} &
        pid=$!
        while ps -p $pid &>/dev/null;do
            date +"%T" >> {output.usage_txt}
            ps -o pid,user,rss,command | grep spades >> {output.usage_txt}
            sleep {params.ps_interval}
        done
        mv {params.outdir}/scaffolds.fasta {output.scaffolds_fasta}
        rm -rfv {params.outdir}/K* 1>>{log.stdout}
        '''

rule megahit:
    input:
        fqs = get_fastqs
    output:
        scaffolds_fasta = "results/samples/{sample}/assembly/megahit/{sample}.scaffolds.fasta",
        time_txt = "results/samples/{sample}/assembly/megahit/megahit.time.txt",
        usage_txt = "results/samples/{sample}/assembly/megahit/megahit.mem.txt"
    log: 
        stdout = "results/logs/{sample}.megahit.stdout",
        stderr = "results/logs/{sample}.megahit.stderr"
    conda: "envs/assembly.yaml"
    threads: 32
    resources:
        mem_mb = MAX_MEM_MB
    params:
        mem = MAX_MEM_B,
        outdir = "results/samples/{sample}/assembly/megahit",
        prefix = "final",
        ps_interval = config.get('ps_interval', 300)
    shell:
        '''
        /usr/bin/time -f"%E %M" -o {output.time_txt} \
        megahit -1 {input.fqs[0]} -2 {input.fqs[1]} \
        -t {threads} \
        -m {params.mem} \
        --continue \
        --out-prefix {params.prefix} \
        -o {params.outdir}_tmp 1>{log.stdout} 2>{log.stderr} &
        pid=$!
        while ps -p $pid &>/dev/null;do
            date +"%T" >> {output.usage_txt}
            ps -o pid,user,rss,command | grep megahit >> {output.usage_txt}
            sleep {params.ps_interval}
        done
        mv {params.outdir}_tmp/final.contigs.fa {output.scaffolds_fasta}
        rm -rvf {params.outdir}_tmp/intermediate_contigs 1>>{log.stdout}
        '''

rule quast:
    input:
        scaffolds_fasta = "results/samples/{sample}/assembly/{assembler}/{sample}.scaffolds.fasta"
    output:
        report_tsv="results/samples/{sample}/assembly/quast_{assembler}/report.tsv"
    conda: 
        "envs/quast.yaml"
    log:
        stdout="results/logs/{sample}.quast_{assembler}.stdout",
        stderr="results/logs/{sample}.quast_{assembler}.stderr"
    threads: 16
    benchmark: "results/benchmarks/{sample}.quast_{assembler}.tsv"
    params:
        outdir="results/samples/{sample}/assembly/quast_{assembler}",
    shell:
        """
        quast -t {threads} -o {params.outdir} \
        --no-html --no-icarus \
        {input.scaffolds_fasta} 1>{log.stdout} 2>{log.stderr}
        """

rule bwa_index:
    input:
        scaffolds_fasta = "results/samples/{sample}/assembly/{assembler}/{sample}.scaffolds.fasta"
    output:
        index_files = multiext(
                "results/samples/{sample}/mapping/{assembler}_index/{sample}_{assembler}",
                ".amb",".ann", ".bwt", ".pac", ".sa")
    conda:
        "envs/mapping.yaml"
    log:
        stdout="results/logs/{sample}.bwa_index_{assembler}.stdout",
        stderr="results/logs/{sample}.bwa_index_{assembler}.stderr"
    params:
        prefix="results/samples/{sample}/mapping/{assembler}_index/{sample}_{assembler}"
    benchmark:
        "results/benchmarks/{sample}.bwa_index_{assembler}.tsv"
    shell:
        """
        bwa index -p {params.prefix} \
        {input.scaffolds_fasta} 1>{log.stdout} 2>{log.stderr}
        """


rule bwa_mem:
    input:
        fqs=get_fastqs,
        index_files = rules.bwa_index.output.index_files
    output:
        bam="results/samples/{sample}/mapping/{sample}_{assembler}.bam",
        bam_index="results/samples/{sample}/mapping/{sample}_{assembler}.bam.csi"
    conda:
        "envs/mapping.yaml"
    log:
        bwa_mem_stderr="results/logs/{sample}.bwa_mem_{assembler}.stderr",
        samtools_stderr="results/logs/{sample}.samtools_sort_{assembler}.stderr"
    threads: 16 
    params:
        index="results/samples/{sample}/mapping/{assembler}_index/{sample}_{assembler}.fa",
        read_group=r"'@RG\tID:{sample}\tSM:{sample}'",
        sort_prefix="results/samples/{sample}/mapping/{sample}_{assembler}.tmp"
    benchmark:
        "results/benchmarks/{sample}.bwa_mem_{assembler}.tsv"
    shell:
        """
        bwa mem -t {threads} \
        -R {params.read_group} \
        {params.index} \
        {input.fqs[0]} {input.fqs[1]} 2>{log.bwa_mem_stderr} \
        | samtools sort \
        --threads {threads} \
        -T {params.sort_prefix} \
        -O bam \
        --write-index \
        -o {output.bam} 2>{log.samtools_stderr}
        """

rule samtools_flagstat:
    input:
        bam=rules.bwa_mem.output.bam,
        bam_index=rules.bwa_mem.output.bam_index
    output:
        flagstat="results/samples/{sample}/mapping/stats/{sample}_{assembler}.flagstat.txt"
    conda:
        "envs/mapping.yaml"
    log:
        stderr="results/logs/{sample}.samtools_flagstat_{assembler}.stderr"
    threads: 8
    benchmark:
        "results/benchmarks/{sample}.samtools_flagstat_{assembler}.tsv"
    shell:
        """
        samtools flagstat \
        --threads {threads} \
        {input.bam} 1>{output.flagstat} 2>{log.stderr}
        """

rule samtools_stats:
    input:
        bam=rules.bwa_mem.output.bam,
        bam_index=rules.bwa_mem.output.bam_index
    output:
        stats="results/samples/{sample}/mapping/stats/{sample}_{assembler}.stats.txt"
    conda:
        "envs/mapping.yaml"
    log:
        stderr="results/logs/{sample}.samtools_stats_{assembler}.stderr"
    threads: 8
    benchmark:
        "results/benchmarks/{sample}.samtools_stats_{assembler}.tsv"
    shell:
        """
        samtools stats \
        --threads {threads} \
        {input.bam} 1>{output.stats} 2>{log.stderr}
        """


rule size_filter:
    input:
        scaffolds_fasta = "results/samples/{sample}/assembly/{assembler}/{sample}.scaffolds.fasta"
    output:
        filtered_fasta="results/samples/{sample}/assembly/{assembler}.filtered.fa"
    conda:
        "envs/assembly.yaml"
    log:
        stderr="results/logs/{sample}.filter_{assembler}.stderr"
    benchmark: 
        "results/benchmarks/{sample}.filter_{assembler}.tsv"
    params:
        min_length=1500,
    shell:
        """
        seqtk seq \
        -L {params.min_length} \
        {input.scaffolds_fasta} > {output.filtered_fasta} 2>{log.stderr}
        """

rule samtools_faidx_filtered_assembly:
    input:
        fa=rules.size_filter.output.filtered_fasta
    output:
        faidx="results/samples/{sample}/assembly/{assembler}.filtered.fa.fai"
    conda:
        "envs/mapping.yaml"
    threads: 1
    log:
        stderr = "results/logs/{sample}.faidx_filtered_assembly_{assembler}.stderr"
    shell:
        """
        samtools faidx {input.fa}
        """

rule faidx_to_bed:
    input:
        faidx=rules.samtools_faidx_filtered_assembly.output.faidx
    output:
        contigs_bed="results/samples/{sample}/assembly/{assembler}.filtered_contigs.bed"
    conda:
        "envs/mapping.yaml"
    shell:
        """
        awk 'BEGIN {{FS="\t"}}; \
        {{print $1 FS "1" FS $2}}' {input.faidx} > {output.contigs_bed}
        """

rule filter_bam:
    input:
        bam=rules.bwa_mem.output.bam,
        contigs_bed=rules.faidx_to_bed.output.contigs_bed
    output:
        filtered_bam="results/samples/{sample}/mapping/{sample}.filtered.{assembler}.bam"
    conda:
        "envs/mapping.yaml"
    threads: 4
    log:
        stderr="results/logs/{sample}_{assembler}.filter_bam.stderr"
    shell:
        """
        samtools view -u -L {input.contigs_bed} {input.bam} \
        | samtools sort --threads {threads} \
        --write-index \
        -O bam \
        -o {output.filtered_bam} 2>{log.stderr}
        """


rule cat_contigs:
    input:
        scaffolds=rules.size_filter.output.filtered_fasta,
        cat_db=config["CAT_DB"],
        cat_taxonomy=config["CAT_TAX"]
    output:
        cont2class="results/samples/{sample}/CAT/{assembler}/{sample}.contig2classification.txt",
    conda:
        "envs/cat.yaml"
    log:
        stdout="results/logs/{sample}.cat_contigs_{assembler}.stdout",
        stderr="results/logs/{sample}.cat_contigs_{assembler}.stderr"
    benchmark:
        "results/benchmarks/{sample}.cat_contigs_{assembler}.tsv"
    threads: 16
    params:
        outdir="results/samples/{sample}/CAT/{assembler}",
        out_prefix="results/samples/{sample}/CAT/{assembler}/{sample}"
    shell:
        """
        mkdir -p {params.outdir}
        CAT contigs \
        -c {input.scaffolds} \
        --I_know_what_Im_doing \
        --top 11 \
        -r 10 \
        --nproc {threads} \
        -d {input.cat_db} \
        -t {input.cat_taxonomy} \
        -o {params.out_prefix} 1>{log.stdout} 2>{log.stderr}
        """

rule cat_to_krona_txt:
    input:
        cont2class=rules.cat_contigs.output.cont2class,
        names_dmp=os.path.join(config["CAT_TAX"], "names.dmp")
    output:
        krona_txt="results/samples/{sample}/CAT/{assembler}/{sample}.{assembler}.krona.txt",
        contig_counts="results/samples/{sample}/CAT/{assembler}/{sample}.cat_to_krona.txt"
    conda:
        "envs/krona.yaml"
    params:
        scrpt = srcdir("scripts/cat_to_krona.py")
    shell:
        """
        python {params.scrpt} \
        -i {input.cont2class} \
        -n {input.names_dmp} \
        -o {output.krona_txt} \
        --include-stars 1>{output.contig_counts}
        """

rule rat:
    input:
        scaffolds=rules.size_filter.output.filtered_fasta,
        c2c=rules.cat_contigs.output.cont2class,
        filtered_bam=rules.filter_bam.output.filtered_bam,
    output:
        complete_txt="results/samples/{sample}/RAT/{assembler}/{sample}.complete.abundance.txt" ,
        reads_txt="results/samples/{sample}/RAT/{assembler}/{sample}.read2classification.txt" 
    conda:
        "envs/cat.yaml"
    log:
        stderr="results/logs/{sample}.{assembler}.RAT.stderr",
        stdout="results/logs/{sample}.{assembler}.RAT.stdout"
    params:
        cat_exe=config['CAT_DEV'],
        cat_tax=config['CAT_TAX'],
        outdir="results/samples/{sample}/RAT/{assembler}",
        out_prefix="results/samples/{sample}/RAT/{assembler}/{sample}"
    shell:
        """
        mkdir -p {params.outdir}
        {params.cat_exe} reads \
        -c {input.scaffolds} \
        --c2c {input.c2c} \
        -t {params.cat_tax} \
        --bam1 {input.filtered_bam} \
        -o {params.out_prefix} 1>{log.stdout} 2>{log.stdout}
        """

rule rat_to_krona:
    input:
        complete_tsv=rules.rat.output.complete_txt,
        names_dmp=os.path.join(config["CAT_TAX"], "names.dmp")
    output:
        krona_txt="results/samples/{sample}/RAT/{assembler}/{sample}.{assembler}.krona.txt",
    conda:
        "envs/krona.yaml"
    params:
        scrpt = srcdir("scripts/rat_to_krona.py")
    shell:
        """
        python {params.scrpt} \
        -i {input.complete_tsv} \
        -n {input.names_dmp} \
        -o {output.krona_txt} \
        --include-stars 
        """


rule krona_plot:
    input:
        expand("results/samples/{sample}/CAT/{assembler}/{sample}.{assembler}.krona.txt",
                sample=SAMPLES,
                assembler=['megahit',]
        )
    output:
       report("results/krona.html",
               category="Results",
               subcategory="Taxonomy",
               caption="report/aggregated_krona.rst"
               )
    conda:
        "envs/krona.yaml"
    shell:
        """
        ktImportText {input} -o {output}
        """


rule rat_krona_plot:
    input:
        expand("results/samples/{sample}/RAT/{assembler}/{sample}.{assembler}.krona.txt",
                sample=SAMPLES,
                assembler=['megahit']
        )
    output:
       report("results/RAT_krona.html",
               category="Results",
               subcategory="Taxonomy",
               caption="report/aggregated_rat_krona.rst"
               )
    conda:
        "envs/krona.yaml"
    shell:
        """
        ktImportText {input} -o {output}
        """

rule cat_names:
    input:
        cont2class=rules.cat_contigs.output.cont2class,
        cat_taxonomy=config["CAT_TAX"]
    output:
        classwnames="results/samples/{sample}/CAT/{assembler}/{sample}.official_names.txt"
    conda:
        "envs/cat.yaml"
    log:
        stdout="results/logs/{sample}.cat_names_{assembler}.stdout",
        stderr="results/logs/{sample}.cat_names_{assembler}.stderr"
    benchmark:
        "results/benchmarks/{sample}.cat_names_{assembler}.tsv"
    threads: 1
    shell:
        """
        CAT add_names \
        --only_official \
        -t {input.cat_taxonomy} \
        -i {input.cont2class} \
        -o {output.classwnames} 1>{log.stdout} 2>{log.stderr}
        """

rule cat_summary:
    input:
        scaffolds=rules.size_filter.output.filtered_fasta,
        classwnames=rules.cat_names.output.classwnames
    output:
        summary="results/samples/{sample}/CAT/{assembler}/{sample}.summary.txt"
    conda:
        "envs/cat.yaml"
    log:
        stdout="results/logs/{sample}.cat_summary_{assembler}.stdout",
        stderr="results/logs/{sample}.cat_summary_{assembler}.stderr"
    benchmark:
        "results/benchmarks/{sample}.cat_summary_{assembler}.tsv"
    threads: 1
    shell:
        """
        CAT summarise \
        -c {input.scaffolds} \
        -i {input.classwnames} \
        -o {output.summary} 1>{log.stdout} 2>{log.stderr}
        """


rule plot_runstats:
    input:
        #metaspades_time=rules.metaspades.output.time_txt,
        #metaspades_usage=rules.metaspades.output.usage_txt,
        megahit_time=rules.megahit.output.time_txt,
        megahit_usage=rules.megahit.output.usage_txt
    output:
        report("results/runtime_stats/{sample}_usage.html",
                caption="report/runtime_usage.rst",
                category="Assembly Benchmarks",
                subcategory="{sample}"),
    conda:
        "envs/plot.yaml"
    threads: 1
    params:
        data_dir="results/samples/{sample}/assembly",
        scrpt=srcdir("scripts/plot_assembly_stats.py")
    shell:
        """
        python {params.scrpt} -d {params.data_dir} -o {output}
        """


rule multiqc_report:
    input:
        expand([
        "results/samples/{sample}/assembly/quast_{assembler}/report.tsv",
        "results/samples/{sample}/mapping/stats/{sample}_{assembler}.flagstat.txt",
        "results/samples/{sample}/mapping/stats/{sample}_{assembler}.stats.txt",
        "results/samples/{sample}/CAT/{assembler}/{sample}.summary.txt"
        ], 
        sample=SAMPLES, assembler=['megahit']
        )
    output:
        report("results/multiqc_report.html",
                caption="report/results.rst",
                category="Results",
                subcategory="Overview",
                ),
        multiqc_zip="results/multiqc_data.zip"
    log:
        stderr="results/logs/multiqc_report.stderr",
        stdout="results/logs/mutiqc_report.stdout"
    conda:
        "envs/qc.yaml"
    params:
        output_dir="results"

    shell:
        """
        mkdir -p {params.output_dir}
        multiqc -f -dd 3 -z -o {params.output_dir} \
        -m fastqc -m quast -m samtools \
        --no-ansi results 
        """

rule concatenate_benchmarks:
    input:
       rules.multiqc_report.output.multiqc_zip
    output:
        benchmarks_tsv = "results/benchmarks/aggregated/all.tsv"
    conda:
        "envs/plot.yaml"
    params:
        benchmarks_dir = "results/benchmarks",
        scrpt = srcdir("scripts/concatenate_benchmarks.py"),
        BGI_meta = "company BGI C",
        BC_meta = "company BC bc_"
    shell:
        """
        python {params.scrpt} -i {params.benchmarks_dir} \
            -o {output.benchmarks_tsv} -m {params.BGI_meta} \
            -m {params.BC_meta}
        """

rule plot_benchmarks:
    input:
        rules.concatenate_benchmarks.output.benchmarks_tsv
    output:
        report("results/benchmarks/aggregated/s.svg",
                caption = "report/seconds.rst",
                category="Aggregated Benchmarks",
                ),
        report("results/benchmarks/aggregated/io_out.svg",
                caption="report/io.rst",
                category="Aggregated Benchmarks",
                ),
        report("results/benchmarks/aggregated/max_rss.svg",
                caption="report/max_rss.rst",
                category="Aggregated Benchmarks",
                ),
        report("results/benchmarks/aggregated/cpu_time.svg",
                caption="report/cpu_time.rst",
                category="Aggregated Benchmarks",
                )
    conda:
        "envs/plot.yaml"
    params:
        aggregated_dir = "results/benchmarks/aggregated",
        scrpt = srcdir("scripts/plot_benchmarks.py")
    shell:
        """
        python {params.scrpt} -i {input} \
                -o {params.aggregated_dir}
        """

rule make_report_dir:
    input:
        rules.multiqc_report.output[0],
        rules.krona_plot.output,
        rules.rat_krona_plot.output
    output:
        touch("results/.report.done")
    shell:
        """
        mkdir -p report/results
        cp results/multiqc_report.html report/results/
        cp results/krona.html report/results
        cp results/RAT_krona.html report/results
        cp -r results/runtime_stats report/
        """
